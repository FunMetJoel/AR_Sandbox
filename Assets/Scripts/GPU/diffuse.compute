#pragma kernel CSMain

RWStructuredBuffer<float> _InputBuffer;
RWStructuredBuffer<float> _OutputBuffer;

float _DiffusionRate;
int _Width;
int _Height;

int indexFromId(uint3 id)
{
    return id.x + _Width * id.y;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Width - 1 || id.y > _Height - 1)
    {
        return;
    }

    // Calculate diffused value
    int count = 0;
    float sum = _InputBuffer[indexFromId(id)];
    if (id.x > 0)
    {
        sum += _InputBuffer[indexFromId(uint3(id.x - 1, id.y, 0))];
        count++;
    }
    if (id.x < _Width - 1)
    {
        sum += _InputBuffer[indexFromId(uint3(id.x + 1, id.y, 0))];
        count++;
    }
    if (id.y > 0)
    {
        sum += _InputBuffer[indexFromId(uint3(id.x, id.y - 1, 0))];
        count++;
    }
    if (id.y < _Height - 1)
    {
        sum += _InputBuffer[indexFromId(uint3(id.x, id.y + 1, 0))];
        count++;
    }

    float average = sum / (count + 1);
    _OutputBuffer[indexFromId(id)] = _InputBuffer[indexFromId(id)] + (_DiffusionRate * (average - _InputBuffer[indexFromId(id)]));

    // Lef
}